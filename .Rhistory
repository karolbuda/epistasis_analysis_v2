types = c(types, "Neutral Negative")
} else {
# Negative Positive
types = c(types, "Positive Negative")
}
} else {
# Neutral or Positive
if(higher_all_sign_check$min_effect[each] > log10(threshold)) {
# Full positive
types = c(types, "Positive")
} else if(higher_all_sign_check$max_effect[each] > log10(threshold)) {
# Neutral Positive
types = c(types, "Neutral Positive")
} else {
# Neutral
types = c(types, "Neutral")
}
}
}
higher_all_sign_check$type = factor(types)
order_checker = higher_all_sign_check %>%
filter(mutations == "Order 1") %>%
pull(type)
order_checker_levels = c("Negative", "Neutral", "Positive", "Neutral Negative", "Neutral Positive", "Positive Negative")
summary(order_checker)
sum(summary(order_checker))
summary(order_checker) / length(order_checker) * 100
pie_df = tibble(names = factor(names(summary(order_checker)), levels = order_checker_levels), values = summary(order_checker))
pie_order_1 = ggplot(pie_df, aes(x="", y=values, fill=names))+
geom_bar(width = 1, stat = "identity") +
coord_polar("y") +
theme_minimal() +
theme(axis.title.x = element_blank(), axis.title.y = element_blank(), panel.border = element_blank(), panel.grid=element_blank(), axis.ticks = element_blank(), plot.title=element_text(size=14, face="bold"))
pie_order_1
#ggsave("fig_1C.svg", pie_order_1, width = 180/2, height = 247/4, dpi = 300, units = "mm")
order_checker = higher_all_sign_check %>%
filter(mutations == "Order 2") %>%
pull(type)
summary(order_checker)
sum(summary(order_checker))
summary(order_checker) / length(order_checker) * 100
pie_df = tibble(names = factor(names(summary(order_checker)), levels = order_checker_levels), values = summary(order_checker))
pie_order_2 = ggplot(pie_df, aes(x="", y=values, fill=names))+
geom_bar(width = 1, stat = "identity") +
coord_polar("y") +
theme_minimal() +
theme(axis.title.x = element_blank(), axis.title.y = element_blank(), panel.border = element_blank(), panel.grid=element_blank(), axis.ticks = element_blank(), plot.title=element_text(size=14, face="bold"))
pie_order_2
#ggsave("fig_2B_1.svg", pie_order_2, width = 180/2, height = 247/4, dpi = 300, units = "mm")
order_checker = higher_all_sign_check %>%
filter(mutations == "Order 3") %>%
pull(type)
summary(order_checker)
sum(summary(order_checker))
summary(order_checker) / length(order_checker) * 100
pie_df = tibble(names = factor(names(summary(order_checker)), levels = order_checker_levels), values = summary(order_checker))
pie_order_3 = ggplot(pie_df, aes(x="", y=values, fill=names))+
geom_bar(width = 1, stat = "identity") +
coord_polar("y") +
theme_minimal() +
theme(axis.title.x = element_blank(), axis.title.y = element_blank(), panel.border = element_blank(), panel.grid=element_blank(), axis.ticks = element_blank(), plot.title=element_text(size=14, face="bold"))
pie_order_3
#ggsave("fig_2B_2.svg", pie_order_3, width = 180/2, height = 247/4, dpi = 300, units = "mm")
order_checker = higher_all_sign_check %>%
filter(mutations == "Order 4") %>%
pull(type)
summary(order_checker)
sum(summary(order_checker))
summary(order_checker) / length(order_checker) * 100
pie_df = tibble(names = factor(names(summary(order_checker)), levels = order_checker_levels), values = summary(order_checker))
pie_order_4 = ggplot(pie_df, aes(x="", y=values, fill=names))+
geom_bar(width = 1, stat = "identity") +
coord_polar("y") +
theme_minimal() +
theme(axis.title.x = element_blank(), axis.title.y = element_blank(), panel.border = element_blank(), panel.grid=element_blank(), axis.ticks = element_blank(), plot.title=element_text(size=14, face="bold"))
pie_order_4
#ggsave("fig_2B_3.svg", pie_order_4, width = 180/2, height = 247/4, dpi = 300, units = "mm")
idio_d %>%
filter(mutations == "Order 2" | mutations == "Order 3" | mutations == "Order 4") %>%
mutate(idiosync_1.5 = idiosync > log10(1.5),
idiosync_2 = idiosync > log10(2),
idiosync_5 = idiosync > log10(5),
idiosync_10 = idiosync > log10(10)) %>%
group_by(mutations) %>%
summarise(idiosync_sig_1.5 = sum(idiosync_1.5),
idiosync_sig_2 = sum(idiosync_2),
idiosync_sig_5 = sum(idiosync_5),
idiosync_sig_10 = sum(idiosync_10),
idiosync_total = length(idiosync),
idiosync_1.5 = sum(idiosync_1.5)/length(idiosync_1.5) * 100,
idiosync_2 = sum(idiosync_2)/length(idiosync_2) * 100,
idiosync_5 = sum(idiosync_5)/length(idiosync_5) * 100,
idiosync_10 = sum(idiosync_10)/length(idiosync_10) * 100
)
idio_d
idio_d %>% count(mutations)
higher_df
higher_df %>% count(mutations)
higher_all_sign_check
higher_all_sign_check %>% count(mutations)
higher_all_sign_check %>% ungroup() %>% count(mutations)
idio_d %>% count(mutations)
idio_d
list.files(path = "Output", pattern="idio_df", recursive = T)
d1
higher_df
unique(higher_df$unique_id)
length(unique(higher_df$unique_id))
dim(idio_d)
idio_d
test = lapply(paste0("Output/", list.files(path = "Output", pattern="*wt_rel.csv", recursive = T)), read_csv, show_col_types=F, col_names = c("positions", "identity", "mut", "effects", "enzyme", "type", "cond"))
View(test)
test
test = lapply(paste0("Output/", list.files(path = "Output", pattern="idio_df", recursive = T)), read_csv, show_col_types=F)
test
idio_d
?lapply
test
test[[43]]
all_mae = lapply(paste0("Output/", list.files(path = "Output", pattern="aic_*", recursive = T)), read_csv, skip = 1, show_col_types=F, col_names = c("MAE", "Last MAE", "Step", "Enzyme", "Linear MAE", "Linear Last MAE"))
for(element in 1:length(all_mae)){
all_mae[[element]]$ID = as.factor(element)
}
all_mae = do.call("rbind", all_mae)
all_mae
all_mae %>%
group_by(ID) %>%
summarise(wtbg_mean = mean(`Last MAE`),
wtbg_median = median(`Last MAE`),
lin_mean = mean(`Linear Last MAE`),
lin_median = median(`Linear Last MAE`))
aall_mae
all_mae
all_mae %>%
group_by(Step) %>%
summarise(wtbg_mean = mean(`Last MAE`),
wtbg_median = median(`Last MAE`),
lin_mean = mean(`Linear Last MAE`),
lin_median = median(`Linear Last MAE`))
all_mae %>%
group_by(Step) %>%
summarise(wtbg_mean = 10^mean(`Last MAE`),
wtbg_median = 10^median(`Last MAE`),
lin_mean = 10^mean(`Linear Last MAE`),
lin_median = 10^median(`Linear Last MAE`))
?lm
r = 1e-7
r
library(deSolve)
?deSolve
library(deSolve)
rxn = function(t, start, parms) {
# rate constant passed through a list called parms
a = parms$a
b = parms$b
r=rep(0,length(start))
r[1]=a*(1-c["q"]) + b*c["q"]
return(list(r))
}
cinit = c(q=0)
t = seq(1, 1000, 1)
parms = list(a=1e-7,b=1e-7)
out=ode(y=cinit,times=t,func=rxnrate,parms=parms)
out=ode(y=cinit,times=t,func=rxn,parms=parms)
rm(q)
library(deSolve)
rxn = function(t, c, parms) {
# rate constant passed through a list called parms
a = parms$a
b = parms$b
r=rep(0,length(start))
r[1]=a*(1-c["q"]) + b*c["q"]
return(list(r))
}
cinit = c(q=0)
t = seq(1, 1000, 1)
parms = list(a=1e-7,b=1e-7)
out=ode(y=cinit,times=t,func=rxn,parms=parms)
head(out)
library(deSolve)
rxn = function(t, c, parms) {
# rate constant passed through a list called parms
a = parms$a
b = parms$b
r=rep(0,length(start))
r[1]=a*(1-c["q"]) - b*c["q"]
return(list(r))
}
cinit = c(q=0)
t = seq(1, 1000, 1)
parms = list(a=1e-7,b=1e-7)
out=ode(y=cinit,times=t,func=rxn,parms=parms)
head(out)
plot(q ~ time, out)
library(deSolve)
rxn = function(t, c, parms) {
# rate constant passed through a list called parms
a = parms$a
b = parms$b
r=rep(0,length(start))
r[1]=a*(1-c["q"]) - b*c["q"]
return(list(r))
}
cinit = c(q=0)
t = seq(1, 10000, 1)
parms = list(a=1e-7,b=1e-7)
out=ode(y=cinit,times=t,func=rxn,parms=parms)
plot(q ~ time, out)
library(deSolve)
rxn = function(t, c, parms) {
# rate constant passed through a list called parms
a = parms$a
b = parms$b
r=rep(0,length(start))
r[1]=a*(1-c["q"]) - b*c["q"]
return(list(r))
}
cinit = c(q=0)
t = seq(1, 1e7, 100)
parms = list(a=1e-7,b=1e-7)
out=ode(y=cinit,times=t,func=rxn,parms=parms)
plot(q ~ time, out)
10^(0:10)
library(deSolve)
rxn = function(t, c, parms) {
# rate constant passed through a list called parms
a = parms$a
b = parms$b
r=rep(0,length(start))
r[1]=a*(1-c["q"]) - b*c["q"]
return(list(r))
}
cinit = c(q=0)
t = 10^(0:12)
parms = list(a=1e-7,b=1e-7)
out=ode(y=cinit,times=t,func=rxn,parms=parms)
plot(q ~ log10(time), out)
library(deSolve)
rxn = function(t, c, parms) {
# rate constant passed through a list called parms
a = parms$a
b = parms$b
r=rep(0,length(start))
r[1]=a*(1-c["q"]) - b*c["q"]
return(list(r))
}
cinit = c(q=0)
t = 10^(0:12)
parms = list(a=1e-7,b=1e-8)
out=ode(y=cinit,times=t,func=rxn,parms=parms)
plot(q ~ log10(time), out)
tail(out)
1e-7/1e-8
e = 0.001
s = 400
v = (55*e*s) / (690 + s)
v
e = 0.001
s = 400 / 2^(0:10)
v = (55*e*s) / (690 + s)
plot(v ~ s)
plot(v ~ log10(s))
plot(v*60 ~ log10(s))
e = 0.001
s = 400 / 2^(0:5)
v = (55*e*s) / (690 + s)
plot(v*60 ~ log10(s))
s = 1000 / 2^(0:5)
s
e = 0.001
s = 1000 / 2^(0:5)
v = (55*e*s) / (690 + s)
plot(v*60 ~ log10(s))
e = 0.001
s = 2000 / 1.5^(0:10)
v = (55*e*s) / (690 + s)
plot(v*60 ~ log10(s))
p = 10 * (1- exp(-0.1*seq(1, 10, 1)))
plot(p ~ seq(1, 10, 1))
t = seq(1, 100, 1)
p = 10 * (1-exp(-0.1*t))
plot(p ~ t)
vmax = 0.001 * 100 # uM * s-1
s = 1000/2^(0:11)
km = 500
ki = 2000
v = (vmax*s) / (s+(km*(1 + (s / ki))))
plot(v ~ s)
####
vmax = 0.001 * 100 # uM * s-1
s = 1000/2^(0:11)
km = 500
ki = 1000
v = (vmax*s) / (s+(km*(1 + (s / ki))))
plot(v ~ s)
vmax = 0.001 * 100 # uM * s-1
s = 1000/2^(0:11)
km = 400
ki = 600
v = (vmax*s) / (s+(km*(1 + (s / ki))))
plot(v ~ s)
vmax = 0.001 * 100 # uM * s-1
s = 1000/2^(0:11)
km = 400
ki = 200
v = (vmax*s) / (s+(km*(1 + (s / ki))))
plot(v ~ s)
vmax = 0.001 * 100 # uM * s-1
s = 5000/2^(0:11)
km = 400
ki = 200
v = (vmax*s) / (s+(km*(1 + (s / ki))))
plot(v ~ s)
400*5
vmax = 0.001 * 100 # uM * s-1
s = 10000/2^(0:11)
km = 400
ki = 200
v = (vmax*s) / (s+(km*(1 + (s / ki))))
plot(v ~ s)
mm.kin = function(s, vmax, km) {
return(vmax*s / (s+km))
}
?nls
nls(v ~ vmax*s / (s+km), df, start = list(vmax = 0.03, km = 400))
df = data.frame(v = v, s = s)
nls(v ~ vmax*s / (s+km), df, start = list(vmax = 0.03, km = 400))
0.001 * 100
nls(v ~ vmax*s / (s+km), df, start = list(vmax = 0.1, km = 400))
library(minpack.lm)
nlsLM(v ~ vmax*s / (s+km), df, start = list(vmax = 0.1, km = 400))
v
v1 = (vmax*s) / (s+km)
plot(v ~ v1)
abline(v ~ v)
line(v ~ v)
lines(v ~ v)
abline(lm(v ~ v))
lines(lm(v ~ v))
plot(v ~ v1)
lm(v ~ v1)
m.v = lm(v ~ v1)
plot(v ~ v1)
lines(m.v)
abline(m.v)
m.v = lm(v ~ v)
plot(v ~ v1)
abline(m.v)
lm(v ~ v)
lines(0.01863, 1)
plot(v ~ v1)
lines(0.01863, 1)
lines(1, 0.01863)
?lines
/abline
?abline
plot(v ~ v1)
abline(0.01863, 1)
abline(0, 1)
plot(v ~ v1)
abline(0, 1)
plot(v1 ~ v)
abline(0, 1)
nlsLM(v ~ vmax*s / (s+km), df, start = list(vmax = 0.1, km = 400))
vmax/0.001
0.03333/0.001
400/133.33333
0.99*(1-0.99)*0.1
library(deSolve)
rxn = function(t, c, parms) {
# rate constant passed through a list called parms
a = parms$a
b = parms$b
r=rep(0,length(start))
r[1]=a*(1-c["q"]) - b*c["q"]
return(list(r))
}
cinit = c(q=0)
t = 10^(0:12)
parms = list(a=1e-7,b=1e-8)
out=ode(y=cinit,times=t,func=rxn,parms=parms)
plot(q ~ log10(time), out)
out
pt = 0.99 / (0.99 + (0.01*1.1))
pt
1-pt
install.packages("growthrates")
library(growthrates)
time <- seq(0, 30, length=200)
y <- grow_baranyi(time, c(y0=0.01, mumax=.5, K=0.1, h0=5))[,"y"]
plot(time, y, type="l")
plot(time, y, type="l", log="y")
plot(time, y, type="l")
y <- grow_baranyi(time, c(y0=1.2, mumax=.5, K=0.1, h0=5))[,"y"]
plot(time, y, type="l")
y <- grow_baranyi(time, c(y0=0.01, mumax=.5, K=1, h0=5))[,"y"]
plot(time, y, type="l")
time <- seq(0, 30, length=200)
y1 <- grow_baranyi(time, c(y0=0.01, mumax=.5, K=2, h0=2*5))[,"y"]
y2 <- grow_baranyi(time, c(y0=0.01, mumax=.5, K=2, h0=2*10))[,"y"]
plot(time, y1, type="l")
points(time, y2, type="l")
time <- seq(0, 30, length=200)
y1 <- grow_baranyi(time, c(y0=0.01, mumax=.5, K=0.8, h0=0.8*5))[,"y"]
y2 <- grow_baranyi(time, c(y0=0.01, mumax=.5, K=0.8, h0=0.8*10))[,"y"]
plot(time, y1, type="l")
points(time, y2, type="l")
et = -4*n*(p*log(p) + (1-p)*log(1-p))
n = 1e6
p = 0.99
et = -4*n*(p*log(p) + (1-p)*log(1-p))
et
n = 1e6
p = 0.5
et = -4*n*(p*log(p) + (1-p)*log(1-p))
et
n = 1e6
p = 0.1
et = -4*n*(p*log(p) + (1-p)*log(1-p))
et
n = 10
p = 0.1
et = -4*n*(p*log(p) + (1-p)*log(1-p))
et
n = 1e6
p = 0.1
et = -4*n*(p*log(p) + (1-p)*log(1-p))
et
n = 1e6
p = 0.1
et = -4*n*(p*log(p) + (1-p)*log(1-p))
s = 0.01
prob_fix = (1-exp(-2*n*s*p))/(1-exp(-2*n*s))
prob_fix
n = 1e6
p = 0.9
et = -4*n*(p*log(p) + (1-p)*log(1-p))
s = 0.01
prob_fix = (1-exp(-2*n*s*p))/(1-exp(-2*n*s))
prob_fix
(1-exp(-2*n*s*p))
(1-exp(-2*n*s))
exp(-2*n*s)
n*s
-2*10000
exp(-1)
exp(-2)
exp(-10000)
n = 1e6
p = 0.9
et = -4*n*(p*log(p) + (1-p)*log(1-p))
s = 0.1
prob_fix = (1-exp(-2*n*s*p))/(1-exp(-2*n*s))
prob_fix
n = 1e6
p = 0.9
et = -4*n*(p*log(p) + (1-p)*log(1-p))
s = 0.001
prob_fix = (1-exp(-2*n*s*p))/(1-exp(-2*n*s))
prob_fix
-2*n*s
n = 1e6
p = 0.9
et = -4*n*(p*log(p) + (1-p)*log(1-p))
s = 0
prob_fix = (1-exp(-2*n*s*p))/(1-exp(-2*n*s))
prob_fix
n = 1e6
p = 0.9
et = -4*n*(p*log(p) + (1-p)*log(1-p))
s = 1e-6
prob_fix = (1-exp(-2*n*s*p))/(1-exp(-2*n*s))
prob_fix
rxn_2 = function(t, c, parms) {
# rate constant passed through a list called parms
s = parms$s
r=rep(0,length(start))
r[1]=c["p"]*(1-c["p"])*s
return(list(r))
}
cinit_2 = c(p=0.01)
t_2 = 10^(0:12)
parms_2 = list(s=0.01)
out=ode(y=cinit_2,times=t_2,func=rxn_2,parms=parms_2)
out
rxn_2 = function(t, c, parms) {
# rate constant passed through a list called parms
s = parms$s
r=rep(0,length(start))
r[1]=c["p"]*(1-c["p"])*s
return(list(r))
}
cinit_2 = c(p=0.01)
t_2 = seq(1, 30, 1)
parms_2 = list(s=0.01)
out_2=ode(y=cinit_2,times=t_2,func=rxn_2,parms=parms_2)
put
out
out_2
rxn_2 = function(t, c, parms) {
# rate constant passed through a list called parms
s = parms$s
r=rep(0,length(start))
r[1]=c["p"]*(1-c["p"])*s
return(list(r))
}
cinit_2 = c(p=0.01)
t_2 = seq(1, 48, 1)
parms_2 = list(s=0.1)
out_2=ode(y=cinit_2,times=t_2,func=rxn_2,parms=parms_2)
out_2
plot(p ~ time, out_2)
